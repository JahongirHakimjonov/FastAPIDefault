name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

# Only primitive values here (no expressions that reference other env vars)
env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.7.2"
  UV_LINK_MODE: "copy"
  ENV: "ci"
  POSTGRES_DB: "test"
  POSTGRES_USER: "test"
  POSTGRES_PASSWORD: "test"
  POSTGRES_HOST_AUTH_METHOD: "trust"

jobs:
  ruff:
    name: lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set derived env (IMAGE_*, UV_CACHE_DIR)
        shell: bash
        run: |
          # compute derived values and export for later steps
          echo "IMAGE_PYTHON=python:${PYTHON_VERSION}-slim" >> $GITHUB_ENV
          echo "IMAGE_UV=ghcr.io/astral-sh/uv:${UV_VERSION}-python${PYTHON_VERSION}-bookworm-slim" >> $GITHUB_ENV
          # fallback to ~/.cache/uv if UV_CACHE_DIR is not set
          echo "UV_CACHE_DIR=${UV_CACHE_DIR:-~/.cache/uv}" >> $GITHUB_ENV

      - name: Cache uv (adjust path if needed)
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-

      - name: Install uv and prepare
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Run linter
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          RUNNER="uv run" task lint

  mypy:
    name: typecheck (mypy)
    runs-on: ubuntu-latest
    needs: ruff
    steps:
      - uses: actions/checkout@v4

      - name: Set derived env (IMAGE_*, UV_CACHE_DIR)
        shell: bash
        run: |
          echo "IMAGE_PYTHON=python:${PYTHON_VERSION}-slim" >> $GITHUB_ENV
          echo "IMAGE_UV=ghcr.io/astral-sh/uv:${UV_VERSION}-python${PYTHON_VERSION}-bookworm-slim" >> $GITHUB_ENV
          echo "UV_CACHE_DIR=${UV_CACHE_DIR:-~/.cache/uv}" >> $GITHUB_ENV

      - name: Cache uv (adjust path if needed)
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-

      - name: Install uv and prepare
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Run typecheck
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          RUNNER="uv run" task typecheck

  pytest:
    name: tests (pytest)
    runs-on: ubuntu-latest
    needs: mypy
    services:
      # Use literal POSTGRES values to avoid early-expression issues
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: "test"
          POSTGRES_USER: "test"
          POSTGRES_PASSWORD: "test"
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d test"
          --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Postgres
        shell: bash
        run: |
          for i in $(seq 1 30); do
            pg_isready -h localhost -p 5432 -U test && break
            sleep 1
          done

      - name: Set derived env (needed by this job)
        shell: bash
        run: |
          echo "IMAGE_PYTHON=python:${PYTHON_VERSION}-slim" >> $GITHUB_ENV
          echo "UV_CACHE_DIR=${UV_CACHE_DIR:-~/.cache/uv}" >> $GITHUB_ENV

      - name: Cache uv (adjust path if needed)
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-

      - name: Install uv and prepare
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Run tests
        shell: bash
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
        run: |
          export PATH="${PATH}:/root/.local/bin"
          RUNNER="uv run" task test-ci

  build-image:
    name: build & push image
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Extract project version to env
        id: get_version
        shell: bash
        run: |
          source $HOME/.local/bin/env || true
          LATEST_TAG=$(uvx --from=toml-cli toml get --toml-path=pyproject.toml project.version)
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "IMAGE_TAG_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_TAG_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cache image if available (best-effort)
        shell: bash
        run: |
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }} || true

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.IMAGE_TAG_SHA }}
            ghcr.io/${{ github.repository }}:${{ env.IMAGE_TAG_BRANCH }}
            ghcr.io/${{ github.repository }}:${{ env.LATEST_TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-to: type=inline

      - name: Print tags
        shell: bash
        run: |
          echo "Pushed tags:"
          echo " - ghcr.io/${{ github.repository }}:${{ env.IMAGE_TAG_SHA }}"
          echo " - ghcr.io/${{ github.repository }}:${{ env.IMAGE_TAG_BRANCH }}"
          echo " - ghcr.io/${{ github.repository }}:${{ env.LATEST_TAG }}"
