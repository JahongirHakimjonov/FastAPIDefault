name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

# Only define base values here â€” do NOT reference env.* inside this block.
env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.7.2"
  UV_LINK_MODE: "copy"
  ENV: "ci"
  POSTGRES_DB: "test"
  POSTGRES_USER: "test"
  POSTGRES_PASSWORD: "test"
  POSTGRES_HOST_AUTH_METHOD: "trust"

jobs:
  ruff:
    name: lint (ruff)
    runs-on: ubuntu-latest
    # compute derived IMAGE_* at job level (allowed to reference workflow env)
    env:
      IMAGE_PYTHON: "python:${{ env.PYTHON_VERSION }}-slim"
      IMAGE_UV: "ghcr.io/astral-sh/uv:${{ env.UV_VERSION }}-python${{ env.PYTHON_VERSION }}-bookworm-slim"
      # Optional: UV cache dir fallback using expression
      UV_CACHE_DIR: ${{ env.UV_CACHE_DIR || '~/.cache/uv' }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache uv (adjust UV_CACHE_DIR if needed)
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-

      - name: Install uv and prepare
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${{ env.UV_VERSION }}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Run linter
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          RUNNER="uv run" task lint

  mypy:
    name: typecheck (mypy)
    runs-on: ubuntu-latest
    needs: ruff
    env:
      IMAGE_PYTHON: "python:${{ env.PYTHON_VERSION }}-slim"
      IMAGE_UV: "ghcr.io/astral-sh/uv:${{ env.UV_VERSION }}-python${{ env.PYTHON_VERSION }}-bookworm-slim"
      UV_CACHE_DIR: ${{ env.UV_CACHE_DIR || '~/.cache/uv' }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache uv (adjust UV_CACHE_DIR if needed)
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-

      - name: Install uv and prepare
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${{ env.UV_VERSION }}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Run typecheck
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          RUNNER="uv run" task typecheck

  pytest:
    name: tests (pytest)
    runs-on: ubuntu-latest
    needs: mypy
    env:
      IMAGE_PYTHON: "python:${{ env.PYTHON_VERSION }}-slim"
      UV_CACHE_DIR: ${{ env.UV_CACHE_DIR || '~/.cache/uv' }}
    services:
      # it's ok to use expressions to reference workflow-level env here
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }}"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Wait for Postgres
        shell: bash
        run: |
          for i in $(seq 1 30); do
            pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }} && break
            sleep 1
          done

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-

      - name: Install uv and prepare
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${{ env.UV_VERSION }}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Run tests
        env:
          DATABASE_URL: "postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}"
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          RUNNER="uv run" task test-ci

  build-image:
    name: build & push image
    runs-on: ubuntu-latest
    needs: pytest
    # compute IMAGE_UV here if needed
    env:
      IMAGE_UV: "ghcr.io/astral-sh/uv:${{ env.UV_VERSION }}-python${{ env.PYTHON_VERSION }}-bookworm-slim"
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        shell: bash
        run: |
          export PATH="${PATH}:/root/.local/bin"
          curl -LsSf https://astral.sh/uv/${{ env.UV_VERSION }}/install.sh | sh
          source $HOME/.local/bin/env
          uv tool install go-task-bin

      - name: Extract project version to env
        shell: bash
        run: |
          source $HOME/.local/bin/env || true
          LATEST_TAG=$(uvx --from=toml-cli toml get --toml-path=pyproject.toml project.version)
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG is ${LATEST_TAG}"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cache image if available (best-effort)
        shell: bash
        run: |
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }} || true

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:${{ env.LATEST_TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-to: type=inline
